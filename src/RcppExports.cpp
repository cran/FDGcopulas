// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// estimCov_ev_CPP
NumericMatrix estimCov_ev_CPP(NumericMatrix data);
RcppExport SEXP FDGcopulas_estimCov_ev_CPP(SEXP dataSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP );
        NumericMatrix __result = estimCov_ev_CPP(data);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// generatorCPP
/* ************* * generator * ************* input arguments: * value: a real number between 0 and 1 * type: the type of function wanted  * family: parametric family for the generators  * parameter: a real parameter  * type: 1 = derivative, 2 = generator, 3 = inverse * family: 1 = frechet, 2 = cuadrasauge, 3 = sinus, 4 = exponential */  double generatorCPP(double value, int type, double parameter, int family);
RcppExport SEXP FDGcopulas_generatorCPP(SEXP valueSEXP, SEXP typeSEXP, SEXP parameterSEXP, SEXP familySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< int >::type type(typeSEXP );
        Rcpp::traits::input_parameter< double >::type parameter(parameterSEXP );
        Rcpp::traits::input_parameter< int >::type family(familySEXP );
        /* ************* * generator * ************* input arguments: * value: a real number between 0 and 1 * type: the type of function wanted  * family: parametric family for the generators  * parameter: a real parameter  * type: 1 = derivative, 2 = generator, 3 = inverse * family: 1 = frechet, 2 = cuadrasauge, 3 = sinus, 4 = exponential */  double __result = generatorCPP(value, type, parameter, family);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// randGenCPP
NumericMatrix randGenCPP(int sampleSize, int family, NumericVector parameter, NumericVector latent, NumericMatrix v);
RcppExport SEXP FDGcopulas_randGenCPP(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP latentSEXP, SEXP vSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP );
        Rcpp::traits::input_parameter< int >::type family(familySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type latent(latentSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP );
        NumericMatrix __result = randGenCPP(sampleSize, family, parameter, latent, v);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// randGenCPP_2
NumericMatrix randGenCPP_2(int sampleSize, int family, NumericVector parameter);
RcppExport SEXP FDGcopulas_randGenCPP_2(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP );
        Rcpp::traits::input_parameter< int >::type family(familySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP );
        NumericMatrix __result = randGenCPP_2(sampleSize, family, parameter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// randGen_ev_CPP
NumericMatrix randGen_ev_CPP(int sampleSize, int family, NumericVector parameter, NumericVector latent, NumericMatrix v, int underlyingSampleSize);
RcppExport SEXP FDGcopulas_randGen_ev_CPP(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP latentSEXP, SEXP vSEXP, SEXP underlyingSampleSizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP );
        Rcpp::traits::input_parameter< int >::type family(familySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type latent(latentSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP );
        Rcpp::traits::input_parameter< int >::type underlyingSampleSize(underlyingSampleSizeSEXP );
        NumericMatrix __result = randGen_ev_CPP(sampleSize, family, parameter, latent, v, underlyingSampleSize);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// randGen_ev_CPP_2
NumericMatrix randGen_ev_CPP_2(int sampleSize, int family, NumericVector parameter, int underlyingSampleSize);
RcppExport SEXP FDGcopulas_randGen_ev_CPP_2(SEXP sampleSizeSEXP, SEXP familySEXP, SEXP parameterSEXP, SEXP underlyingSampleSizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP );
        Rcpp::traits::input_parameter< int >::type family(familySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parameter(parameterSEXP );
        Rcpp::traits::input_parameter< int >::type underlyingSampleSize(underlyingSampleSizeSEXP );
        NumericMatrix __result = randGen_ev_CPP_2(sampleSize, family, parameter, underlyingSampleSize);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
